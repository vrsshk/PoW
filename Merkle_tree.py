from hash import hash_1

class MerkleTree:
    def __init__(self, transactions):
        self.transactions = transactions
        # –°–ø–∏—Å–æ–∫ –•–µ—à–µ–π, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å—Å—è –¥–µ—Ä–µ–≤–æ
        self.list_hashes = [hash_1(self.convert_to_bits(tx)) for tx in transactions]
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø–æ–∫–∞ –µ—Å—Ç—å –∏–∑ —á–µ–≥–æ —Å—Ç—Ä–æ–∏—Ç—å
        self.root = self.build_tree(self.list_hashes) if transactions else None

    def convert_to_bits(self, data):
        return ''.join(f'{b:08b}' for b in data.encode('utf-8'))

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞
    def build_tree(self, hashes):
        # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç, –æ–Ω –∏ –±—É–¥–µ—Ç –∫–æ—Ä–Ω–µ–º
        if len(hashes) == 1:
            return hashes[0]

        new_level = []  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å –≤ –≤–µ—Ç–∫–µ
        # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Ö–µ—à–∞–º, –ø–æ–ø–∞—Ä–Ω–æ —Å–æ–µ–¥–∏–Ω—è—è –∏—Ö
        for i in range(0, len(hashes), 2):
            left = hashes[i]
            # –î–ª—è –ø—Ä–∞–≤–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –¥—É–±–ª–∏—Ä—É–µ–º –ª–µ–≤—ã–π
            right = hashes[i + 1] if i + 1 < len(hashes) else left
            # –î–∞–ª–µ–µ –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∏—Ö (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω—è–µ–º –∏ –±–µ—Ä–µ–º —Ö–µ—à –¥–ª–∏–Ω–Ω–æ–π 256)
            combined = self.convert_to_bits(left) + self.convert_to_bits(right)
            new_level.append(hash_1(combined))

        return self.build_tree(new_level)

    # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–µ–Ω—å
    def get_root(self):
        return self.root

    # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —ç—Ç–æ–º—É –¥–µ—Ä–µ–≤—É (True/False)üí´ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
    def verify_transaction(self, transaction: str) -> bool:
        if not self.root:
            return False

        target_hash = hash_1(self.convert_to_bits(transaction))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ö–µ—à–µ–π
        if target_hash not in self.list_hashes:
            return False
        # –î–∞–ª–µ–µ –Ω–∞—Ö–æ–¥–∏–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–æ–≥–æ, —á—Ç–æ —Ö–µ—à –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–µ—Ä–µ–≤—É
        proof = self.get_proof(target_hash)
        current = target_hash

        for direction, sibling in proof:
            if direction == 'left':
                combined = self.convert_to_bits(sibling) + self.convert_to_bits(current)
            else:
                combined = self.convert_to_bits(current) + self.convert_to_bits(sibling)
            current = hash_1(combined)

        return current == self.root

    def get_proof(self, hash_data):
        proof = []
        current_level = self.list_hashes.copy()
        index = current_level.index(hash_data)
        # –¢—É—Ç –º—ã –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–ª–∏—Å—Ç–∞) –∫ –≤–µ—Ä—Ö–Ω–µ–º—É (–∫–æ—Ä–Ω—é)
        while len(current_level) > 1:
            next_level = []
            new_index = -1

            for i in range(0, len(current_level), 2):
                left = current_level[i]
                right = current_level[i + 1] if i + 1 < len(current_level) else left
                combined = self.convert_to_bits(left) + self.convert_to_bits(right)
                # –§–æ—Ä–º–∏—Ä—É–µ–º –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ô –£–ó–ï–õ
                parent = hash_1(combined)
                next_level.append(parent)
                # –î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞
                if i == index or i + 1 == index:
                    new_index = len(next_level) - 1

            if index % 2 == 0:
                sibling_index = index + 1 if index + 1 < len(current_level) else index
                proof.append(('right', current_level[sibling_index]))
            else:
                proof.append(('left', current_level[index - 1]))

            current_level = next_level
            index = new_index

        return proof


transactions = [
    "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1",
    "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 2",
    "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 3",
    "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 4",
    "–ë–µ–∑–≤–µ—Ä–∂–µ–Ω–∫–æ –ò–≥–æ—Ä—å"  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –∏–º–µ–Ω–µ–º
]

tree = MerkleTree(transactions)
print("–ö–æ—Ä–µ–Ω—å –ú–µ—Ä–∫–ª–∞:", tree.get_root())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∏–º–µ–Ω–µ–º
tx = "–ë–µ–∑–≤–µ—Ä–∂–µ–Ω–∫–æ –ò–≥–æ—Ä—å"
print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è '{tx}' –≤–∞–ª–∏–¥–Ω–∞:", tree.verify_transaction(tx))
